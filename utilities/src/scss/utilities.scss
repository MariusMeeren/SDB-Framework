/*******************/
/*  CSS Utilities  */
/*******************/

@use "palette" as *;
@use "flex" as *;
@use "columns" as *;
@use "typography" as *;
@use "grid" as *;
@use "cards" as *;
@use "charts" as *;
@use "media-query" as *;
@use "forms" as *;
@use "tables" as *;

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  /* Palette */
  @each $category, $color in $palette {
    @each $shade, $value in $color {
      --#{$category}-#{$shade}: #{$value};
    }
  }

  /*****************/
  /* Font Families */
  /*****************/
  @each $family, $value in $typography {
    @if $family == "styles" {
    } @else {
      --font-#{$family}: "#{$family}", sans-serif;
    }
  }
}

/******************/
/* Typography CSS */
/******************/
@each $font, $props in $typography {
  @each $prop, $value in $props {
    @if $prop == "italic" {
      .#{$prop} {
        font-style: #{$value};
      }
    } @else if $prop == "uppercase" {
      .text-#{$prop} {
        text-transform: #{$value};
      }
    } @else {
      .text-#{"" + $prop} {
        font-weight: #{$value};
      }
    }
  }
}

/***************/
/* Flexbox CSS */
/***************/
@each $class, $prop in $flex-classes {
  @if #{$class} == flex {
    .#{$class} {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  } @else if #{$class} == space-between {
    .#{$class} {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  } @else {
    .#{$class} {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  }
}

/***************/
/* Columns CSS */
/***************/
@each $class, $prop in $columns {
  .#{$class} {
    @each $property, $value in $prop {
      #{$property}: #{$value};
    }
  }
}

/************/
/* Grid CSS */
/************/
@each $class, $prop in $gridbox {
  @if #{$class} == grid {
    .#{$class} {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  } @else {
    .grid-#{$class} {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  }
}

/*********************/
/* Light Theme Cards */
/*********************/
@each $class, $prop in $lightcards {
  .#{$class} {
    @each $property, $value in $prop {
      #{$property}: #{$value};
    }
  }
}

/********************/
/* Dark Theme Cards */
/********************/
@each $class, $prop in $darkmode {
  @if #{$class} == dark {
    [#{$class}] {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  } @else {
    [dark] .#{$class} {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  }
}

/*****************************/
/* Universal Card Properties */
/*****************************/
@each $class, $prop in $universalcards {
  @if (str-index(#{$class}, "-dark") !=null) {
    $darkclass: str-replace($class, "-dark", "");
    [dark] .#{$darkclass} {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  } @else {
    .#{$class} {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  }
}

/**************/
/* Tables CSS */
/**************/
@each $class, $prop in $tables {
  @if #{$class} == darktd {
    [dark] .td {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  } @else if #{$class} == darktable {
    [dark] .table {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  } @else if #{$class} == darkthead {
    [dark] .thead {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  } @else {
    .#{$class} {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  }
}

/*************/
/* Forms CSS */
/*************/
@each $class, $prop in $forms {
  @if (str-index(#{$class}, "-dark") !=null) {
    $darkclass: str-replace($class, "-dark", "");
    @if #{$darkclass} == form-checkbox-checked {
    } @else {
      [dark] .#{$darkclass} {
        @each $property, $value in $prop {
          #{$property}: #{$value};
        }
      }
    }
  } @else if (str-index(#{$class}, "-after") !=null) {
    $after: str-replace($class, "-after", ":after");
    .#{$after} {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  } @else if (str-index(#{$class}, "-before") !=null) {
    $after: str-replace($class, "-before", ":before");
    .#{$after} {
      @each $property, $value in $prop {
        @if $property == content {
          #{$property}: "#{$value}";
        } @else {
          #{$property}: #{$value};
        }
      }
    }
  } @else if (str-index(#{$class}, "-hover") !=null) {
    $after: str-replace($class, "-hover", ":hover");
    .#{$after} {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  } @else if(str-index(#{$class}, "-checked") == null) {
    .#{$class} {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  }

  @if #{$class} == form-checkbox-checked {
    .form-checkbox:checked {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  } @else if #{$class} == form-checkbox-checked-dark {
    [dark] .form-checkbox:checked {
      @each $property, $value in $prop {
        #{$property}: #{$value};
      }
    }
  }
}

/*****************/
/* Media Queries */
/*****************/

/* Max-Width 65em */
@include mq(medium) {
  @each $class, $prop in $flex-classes {
    @each $property, $value in $prop {
      @if #{$class} == row {
        .#{$class} {
          #{$property}: column;
        }
      }
    }
  }

  @each $class, $prop in $columns {
    .#{$class} {
      @each $property, $value in $prop {
        #{$property}: 100%;
      }
    }
  }
}
/* Max-Width 40em */
@include mq(small) {
  @each $class, $prop in $flex-classes {
    @each $property, $value in $prop {
      @if #{$class} == row {
        .#{$class} {
          #{$property}: column;
        }
      }
    }
  }

  @each $class, $prop in $columns {
    .#{$class} {
      @each $property, $value in $prop {
        #{$property}: 100%;
      }
    }
  }
}

/**************/
/* Charts CSS */
/**************/

@each $class, $prop in $charts {
  .#{$class}-chart {
    @each $property, $value in $prop {
      #{$property}: #{$value};
    }
  }
}
